{"version":3,"sources":["Receipt.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","TableRow","TableCell","itemName","personName","itemPrice","Receipt","useState","subtotal","setSubtotal","total","setTotal","tipPercent","setTipPercent","itemsList","setItemsList","setPersonName","setItemName","setItemPrice","Grid","areas","name","start","end","columns","rows","gap","responsive","alignSelf","Box","gridArea","background","align","justify","direction","FormField","id","label","TextInput","placeholder","icon","value","onChange","event","target","reverse","Button","primary","margin","onClick","newItem","newItemsList","concat","handleItemAdd","size","Table","TableHeader","scope","border","TableBody","map","index","theme","global","colors","brand","font","family","height","AppBar","tag","pad","left","right","vertical","elevation","style","zIndex","App","showSidebar","setShowSidebar","Grommet","full","ResponsiveContext","Consumer","fill","Heading","level","Notification","flex","overflow","horizontal","Layer","FormClose","Collapsible","open","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ed711cc.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport {\n\tBox,\n\tButton,\n\tFormField,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TextInput\n} from 'grommet';\n\nfunction Item(props) {\n\n\treturn (\n\n\t\t<TableRow>\n\t\t\t<TableCell>{props.itemName} ({props.personName})</TableCell>\n\t\t\t<TableCell><strong>${props.itemPrice}</strong></TableCell>\n\t\t</TableRow>\n\n\t);\n\n}\n\n\nconst Receipt = () => {\n\n\n\t// Item is a row with a receipt item, person, and the price\n\n\tconst [subtotal, setSubtotal] = useState(0.00)\n\tconst [total, setTotal] = useState(0.00)\n\tconst [tipPercent, setTipPercent] = useState(0)\n\tconst [itemsList, setItemsList] = useState([])\n\n\tconst [personName, setPersonName] = useState()\n\tconst [itemName, setItemName] = useState()\n\tconst [itemPrice, setItemPrice] = useState()\n\n\tfunction handleItemAdd() {\n\t\tconst newItem = { itemName: itemName, personName: personName, itemPrice: itemPrice };\n\t\tconst newItemsList = itemsList.concat(newItem);\n\t\tsetItemsList(newItemsList);\n\n\t\tsetPersonName(\"\");\n\t\tsetItemName(\"\");\n\t\tsetItemPrice(0.00);\n\t}\n\n\n\treturn (\n\t\t<Grid \n\t\t\tareas={[\n\t\t\t\t{name: 'check_info', start: [0,0], end: [0,0]},\n\t\t\t\t{name: 'item_info', start: [0,1], end: [0,1]},\n\t\t\t\t{name: 'main', start: [0,2], end: [0,2]},\n\t\t\t]} \n\t\t\tcolumns={[\"xlarge\"]}\n\t\t\trows={['xsmall', 'xsmall', 'medium']}  \n\t\t\tgap=\"small\"\n\t\t\tresponsive\n\t\t\talignSelf=\"center\"\n\t\t>\n\t\t\t<Box gridArea=\"check_info\" background=\"light-2\" align=\"center\" justify=\"center\" direction=\"row\" gap=\"large\">\n\t\t\t\t<FormField id=\"subtotal\" label=\"Subtotal\" align=\"center\">\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"0.00\" \n  \t\t\t\t\ticon=\"$\" \n  \t\t\t\t\tvalue={subtotal}\n  \t\t\t\t\tonChange={event => setSubtotal(event.target.value)}\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t\t<FormField id=\"total\" label=\"Total\" align=\"center\">\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"0.00\" \n  \t\t\t\t\ticon=\"$\"\n  \t\t\t\t\tvalue={total}\n  \t\t\t\t\tonChange={event => setTotal(event.target.value)}\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t\t<FormField id=\"tip\" label=\"Tip\" align=\"center\">\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"0.0\"\n  \t\t\t\t\ticon=\"%\"\n  \t\t\t\t\treverse\n  \t\t\t\t\tvalue={tipPercent}\n  \t\t\t\t\tonChange={event => setTipPercent(event.target.value)}\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t</Box>\n\t\t\t\n\t\t\t<Box gridArea=\"summary\" background=\"light-6\" direction=\"row\">\n\t\t\t\t<p>I am a box</p>\n\t\t\t</Box>\n\n\t\t\t<Box gridArea=\"item_info\" background=\"light-2\" align=\"center\" justify=\"start\" direction=\"row\" gap=\"small\">\n\t\t\t\t<Button primary label=\"+\" margin=\"medium\" onClick={() => handleItemAdd()}/>\n\t\t\t\t\n\t\t\t\t<FormField id=\"personName\" label=\"Name of Person\">\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"Name of Person\"\n  \t\t\t\t\tvalue={personName}\n  \t\t\t\t\tonChange={event => setPersonName(event.target.value)}\n  \t\t\t\t\tsize=\"small\"\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t\t<FormField id=\"itemName\" label=\"Name of Item\">\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"Name of Item\"\n  \t\t\t\t\tvalue={itemName}\n  \t\t\t\t\tonChange={event => setItemName(event.target.value)}\n  \t\t\t\t\tsize=\"small\"\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t\t<FormField id=\"itemPrice\" label=\"Cost of Item\" >\n  \t\t\t\t<TextInput \n  \t\t\t\t\tplaceholder=\"0.00\"\n  \t\t\t\t\tvalue={itemPrice}\n  \t\t\t\t\tonChange={event => setItemPrice(event.target.value)}\n  \t\t\t\t\tsize=\"small\"\t  \t\t\t\t\t\n  \t\t\t\t/>\n\t\t\t\t</FormField>\n\t\t\t</Box>\n\n\t\t\t<Box gridArea=\"main\" direction=\"column\">\n\t\t\t\t<Table>\n\t\t\t\t\t<TableHeader>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell scope=\"col\" border=\"bottom\">\n\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell scope=\"col\" border=\"bottom\">\n\t\t\t\t\t\t\t\tPrice\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHeader>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{itemsList.map((value, index) => {\n\t\t\t\t\t\t\treturn <Item itemName={value.itemName} personName={value.personName} itemPrice={value.itemPrice} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</Box>\n\t\t\t<Box gridArea=\"bottom\" background=\"light-2\" />\n\t\t</Grid>\n\t);\n};\n\nexport default Receipt;\n","import React, { useState } from 'react';\nimport { \n  Box, \n  Button,\n  Collapsible,\n  Heading,\n  Layer,\n  Grommet,\n  ResponsiveContext\n} from 'grommet';\nimport { FormClose, Notification } from 'grommet-icons';\n\nimport Receipt from './Receipt'\n\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\n\nconst App = () => {\n\n  const [showSidebar, setShowSidebar] = useState(false)\n  \n  return (\n    <Grommet theme={theme} full>\n      <ResponsiveContext.Consumer>\n        {size => (\n          <Box fill>\n            <AppBar>\n              <Heading level=\"3\" margin=\"none\">My App</Heading>\n              <Button \n                icon={<Notification />}\n                onClick={() => setShowSidebar(!showSidebar)} \n              />\n            </AppBar>\n            <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n              <Box flex align='center' justify='center'>\n                <Receipt />\n              </Box>\n                { (!showSidebar || size !== 'small') ? (\n                  <Collapsible direction='horizontal' open={showSidebar}>\n                    <Box\n                      flex\n                      width='medium'\n                      background='light-2'\n                      elevation='small'\n                      align='center'\n                      justify='center'\n                    >\n                      sidebar\n                    </Box>\n                  </Collapsible>\n                ): (\n                  <Layer>\n                    <Box\n                      background='light-2'\n                      tag='header'\n                      justify='end'\n                      align='center'\n                      direction='row'\n                    >\n                      <Button\n                        icon={<FormClose />}\n                        onClick={() => setShowSidebar(false)}\n                      />\n                    </Box>\n                    <Box\n                      fill\n                      background='light-2'\n                      align='center'\n                      justify='center'\n                    >\n                      sidebar\n                    </Box>\n                  </Layer>\n                )\n              }\n            </Box>\n          </Box>\n        )}\n      </ResponsiveContext.Consumer>  \n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}